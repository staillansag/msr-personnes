pool:
  name: Default

variables:
  - group: aks.variables
  - group: azure.variables
  - group: frontend.variables
  - group: personnes.variables
  - group: environment.variables
  - group: sag.variables
 
stages:

- stage: Build
  condition: or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI'))

  jobs:

  - job: BuildImage

    variables:
    - name: MAJOR
      value: $[variables['IMAGE_MAJOR_VERSION']]
    - name: MINOR
      value: $[variables['IMAGE_MINOR_VERSION']]
    - name: VERSION_PREFIX
      value: $(IMAGE_TAG_BASE):$(MAJOR).$(MINOR)
    - name: PATCH
      value: $[counter(variables['VERSION_PREFIX'], 1)]
    - name: VERSION
      value: $(VERSION_PREFIX).$(PATCH)

    steps:

    - script: |
        echo "Building ${VERSION}"
        docker build -t "${VERSION}" . || exit 1
      displayName: "Build new image"

    - script: |
        echo "Tagging ${IMAGE_TAG_BASE}:latest"
        docker tag "${VERSION}" "${IMAGE_TAG_BASE}:latest" || exit 1
      displayName: "Apply latest tag to new image"

    - script: |
        docker login -u "${DOCKER_REGISTRY_ID}" -p "${DOCKER_REGISTRY_SECRET}" "${DOCKER_REGISTRY_URI}" || exit 1
      displayName: 'Login to image registry'
      env:
        DOCKER_REGISTRY_SECRET: $(DOCKER_REGISTRY_SECRET)

    - script: |
        docker push "${VERSION}" || exit 1
      displayName: 'Push new image'

    - script: |
        docker push "${IMAGE_TAG_BASE}:latest" || exit 1
      displayName: 'Push new image (latest)'


- stage: Deploy
  dependsOn: Build
  condition: or(succeeded(), eq(dependencies.Build.result, 'skipped'))

  jobs:

  - job: DeployKubernetes

    steps:

    - script: |
        az login --service-principal -u ${AZ_SP_ID} -p ${AZ_SP_SECRET} --tenant ${AZ_TENANT_ID}
      displayName: 'Login to Azure with service principal'
      env:
        AZ_SP_SECRET: $(AZ_SP_SECRET)

    - script: |
        if [ "${AZ_SANDBOX_MODE}" = "true" ]; then
          AKS_RESOURCE_GROUP=$(az group list --query "[0].name" --output tsv)
          echo "##vso[task.setvariable variable=AKS_RESOURCE_GROUP]${AKS_RESOURCE_GROUP}"
        fi
      displayName: 'Fetch sandbox resource group'

    - script: |
        az aks get-credentials --resource-group ${AKS_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing
      displayName: 'Fetch kube config'

    - script: |
        kubectl apply -f ./resources/kubernetes/cm-msr-personnes.yaml
      displayName: 'Apply properties config map'

    - script: |
        kubectl apply -f ./resources/kubernetes/service-msr-personnes.yaml
      displayName: 'Apply service'

    - script: |
        sed 's/MICROSERVICE_DEPLOYMENT_ID/'${BUILD_BUILDID}'/g' ./resources/kubernetes/deploy-msr-personnes.yaml | kubectl apply -f -
      displayName: 'Apply deployment'

    - script: |
        kubectl rollout status deployment msr-personnes --timeout=5m 
      displayName: 'Wait for end of deployment'

    - script: |
        sleep 30
        PODS=$(kubectl get pods --selector=app=msr-frontend -o jsonpath='{.items[*].metadata.name}')
        for POD in $PODS; do
          health_json=$(kubectl exec $POD --container msr -- curl -s http://localhost:5555/health)
          if [ -z "${health_json}" ]; then
            echo "Empty response to http://localhost:5555/health for pod ${POD}" && exit 1
          else
            echo "Health status for pod ${POD}"
            echo ${health_json}
          fi
          status_checks=$(echo "$health_json" | jq '. | .. | .status? // empty | select(. != "UP")')
          if [[ -n "$status_checks" ]]; then
            echo "Error: One or more resources in $POD are not 'UP'" && exit 1
          fi
          jdbc_state_checks=$(echo "$health_json" | jq '.Adapters.JDBCAdapter.Connections[] | select(.state == "suspended")')
          if [[ -n "$jdbc_state_checks" ]]; then
            echo "Error: One or more JDBC Adapter connections in $POD are suspended"
            exit 1
          fi
        done
      displayName: 'Check health of pods'

- stage: Test
  dependsOn: Deploy

  jobs:

  - job: TestE2E

    steps:

    - script: |
        AUTH_HEADER=$(echo -n "Administrator:${SAG_MSR_ADMIN_PASSWORD}" | base64)
        echo "##vso[task.setvariable variable=AUTH_HEADER]${AUTH_HEADER}"
      displayName: 'Set basic auth header'
      env:
        SAG_MSR_ADMIN_PASSWORD: $(SAG_MSR_ADMIN_PASSWORD)

# Note: basic auth isn't used if the microgateway is deployed, but we keep it here as a convenience to simplify the code
    - script: |
        if [ "${DEPLOY_MICROGATEWAY}" = "true" ]; then
            URL='https://msr-frontend.sttlab.eu/gateway/personnesAPI/1.0/personnes/demande-zip'
        else
            URL='https://msr-frontend.sttlab.eu/personnesAPI/personnes/demande-zip'
        fi
        RESPONSE=$(curl -s --location --request POST ${URL} \
          --header 'Authorization: Basic '${AUTH_HEADER} \
          --header 'x-gateway-apikey: '${API_KEY})
        echo "API root URL: ${URL}"
        echo "POST /personnes/demande-zip response:"
        echo "${RESPONSE}"
        ID_DEMANDE=$(echo "${RESPONSE}" | jq -r '.idDemande')
        if [ "${ID_DEMANDE}" = "null" ] || [ -z "${ID_DEMANDE}" ]; then
          echo "POST /personnes/demande-zip --> ERROR (Invalid idDemande in response: ${ID_DEMANDE})" && exit 1
        fi
      displayName: 'POST /personnes/demande-zip'    
      env:
        API_KEY: $(API_KEY)

    - script: |
        sleep 120
      displayName: 'Wait for E2E integration to finish'   

    - script: |
        export AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY}
        export AWS_SECRET_ACCESS_KEY=${S3_ACCESS_SECRET}
        export AWS_DEFAULT_REGION=${S3_REGION}   
        if aws s3 ls s3://${S3_BUCKET_NAME}/${S3_FOLDER}/${ID_DEMANDE}.zip --region ${S3_REGION}; then
          echo "S3 file ${ID_DEMANDE}.zip fetched"
        else
          echo "ERROR --- S3 file ${ID_DEMANDE}.zip could not be fetched"
          exit 1
        fi
      displayName: 'Check zip file in s3'
      env:
        S3_ACCESS_KEY: $(S3_ACCESS_KEY)
        S3_ACCESS_SECRET: $(S3_ACCESS_SECRET)

    - script: |
        sshpass -p "${SFTP_PASSWORD}" sftp -oPort=${SFTP_PORT} -oStrictHostKeyChecking=no -oBatchMode=no -b - "${SFTP_USER_NAME}@${SFTP_SERVER_NAME}" <<EOF
        ls "${SFTP_FOLDER}/${ID_DEMANDE}.zip"
        EOF
        if [ $? -eq 0 ]; then
          echo "SFTP file ${ID_DEMANDE}.zip fetched"
        else
          echo "ERROR --- SFTP file ${ID_DEMANDE}.zip could not be fetched"
          exit 1
        fi
      displayName: 'Check zip file in SFTP server'
      env:
        SFTP_PASSWORD: $(SFTP_PASSWORD)
